<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hubpd.bigscreen.mapper.weishu_pdmi.PubAccountUserRelationMapper" >
  <resultMap id="BaseResultMap" type="com.hubpd.bigscreen.bean.weishu_pdmi.PubAccountUserRelation" >
    <result column="pub_account_id" property="pubAccountId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="user_follow" property="userFollow" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="expired_time" property="expiredTime" jdbcType="TIMESTAMP" />
    <result column="org_id" property="orgId" jdbcType="VARCHAR" />
  </resultMap>
  <!-- 根据用户id列表查询其包含的所有公众号表id列表信息 -->
  <select id="findPubAccountIdListByUserIdList" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select
      DISTINCT pub_account_id
    from t_pub_account_user_relation tpaur
    <where>
      <if test="userFollow !=null and userFollow > 0">
        tpaur.user_follow=#{userFollow}
      </if>
      <if test="userIdList!=null and userIdList.size() > 0">
        AND tpaur.user_id in
        <foreach collection="userIdList" item="userId"
                 index="index" open="(" close=")" separator=",">
          #{userId}
        </foreach>
      </if>
    </where>
  </select>
  <!-- 根据用户id列表查询其包含的所有公众号表id列表信息 -->
  <select id="findUserAnalyseByPubAccountIdListAndSearchDate" resultType="com.hubpd.bigscreen.vo.WXUserAnalyseVO" parameterType="java.util.Map" >
    SELECT
    tasd.ref_date1 AS 'dateTime',
    tpa.wx_id AS 'wxNo',
    tpa.wx_name AS 'wxName',
    tasd.likeNum AS 'likeNum',
    IFNULL(phase1.new_sum, 0) AS 'newFollowNum',
    IFNULL(phase1.cancel_sum, 0) AS 'cancelFollowNum',
    IFNULL(phase1.real_increase, 0) AS 'realIncreaseFollowNum',
    IFNULL(phase1.cumulate_user, 0) AS 'cumulateFollowNum'
    FROM
    (
    SELECT uc.ref_date,us.pub_account_id,us.new_sum,us.cancel_sum,us.real_increase, uc.cumulate_user
    FROM
    ( SELECT
    ref_date,
    pub_account_id,
    SUM(new_user) AS 'new_sum',
    SUM(cancel_user) AS 'cancel_sum',
    SUM(new_user) - SUM(cancel_user) AS 'real_increase'
    FROM
    t_get_user_summary
    <where>
        <if test="beginDateStr !=null and beginDateStr != ''">
            AND ref_date >= #{beginDateStr}
        </if>
        <if test="endDateStr !=null and endDateStr != ''">
            AND ref_date <![CDATA[<=]]> #{endDateStr}
        </if>
      <if test="pubAccountIdListByUserIdList!=null and pubAccountIdListByUserIdList.size() > 0">
        AND pub_account_id in
        <foreach collection="pubAccountIdListByUserIdList" item="pubAccountId"
                 index="index" open="(" close=")" separator=",">
          #{pubAccountId}
        </foreach>
      </if>
    </where>
    GROUP BY ref_date,pub_account_id
    ORDER BY ref_date,pub_account_id
    ) us
    RIGHT JOIN (
    SELECT
    ref_date,
    pub_account_id,
    cumulate_user
    FROM
    t_get_user_cumulate
    <where>
        <if test="beginDateStr !=null and beginDateStr != ''">
            AND ref_date >= #{beginDateStr}
        </if>
        <if test="endDateStr !=null and endDateStr != ''">
            AND ref_date <![CDATA[<=]]> #{endDateStr}
        </if>
      <if test="pubAccountIdListByUserIdList!=null and pubAccountIdListByUserIdList.size() > 0">
        AND pub_account_id in
        <foreach collection="pubAccountIdListByUserIdList" item="pubAccountId"
                 index="index" open="(" close=")" separator=",">
          #{pubAccountId}
        </foreach>
      </if>
    </where>
    ) uc ON us.pub_account_id = uc.pub_account_id AND us.ref_date = uc.ref_date
    ) phase1
    RIGHT JOIN (
    SELECT
    tas.pub_account_id AS 'pub_account_id1',
    tas.ref_date AS 'ref_date1',
    SUM(tas.total_read_num) AS 'readNum',
    SUM(tas.total_like_num) AS 'likeNum'
    FROM t_article_stat_day tas
    <where>
      <if test="beginDateStr !=null and beginDateStr != ''">
        AND ref_date >= #{beginDateStr}
      </if>
      <if test="endDateStr !=null and endDateStr != ''">
        AND ref_date <![CDATA[<=]]> #{endDateStr}
      </if>
      <if test="pubAccountIdListByUserIdList!=null and pubAccountIdListByUserIdList.size() > 0">
        AND tas.pub_account_id in
        <foreach collection="pubAccountIdListByUserIdList" item="pubAccountId"
                 index="index" open="(" close=")" separator=",">
          #{pubAccountId}
        </foreach>
      </if>
    </where>
    GROUP BY  tas.pub_account_id, tas.ref_date ORDER BY tas.pub_account_id, tas.ref_date DESC
    ) tasd ON tasd.pub_account_id1 = phase1.pub_account_id AND tasd.ref_date1 = phase1.ref_date LEFT JOIN t_pub_account tpa ON tasd.pub_account_id1 = tpa.id
    ORDER BY pub_account_id, real_increase DESC;
  </select>

  <!-- 根据公众号id列表查询微信用户统计信息 -->
  <select id="findUserStatisticsByPubAccountIdListAndSearchDate" resultType="com.hubpd.bigscreen.vo.WXUserAnalyseVO" parameterType="java.util.Map" >
    SELECT
    ref_date AS 'dateTime',
    tpa.wx_id AS 'wxNo',
    tpa.wx_name AS 'wxName',
    IFNULL(phase1.new_sum, 0) AS 'newFollowNum',
    IFNULL(phase1.cancel_sum, 0) AS 'cancelFollowNum',
    IFNULL(phase1.real_increase, 0) AS 'realIncreaseFollowNum',
    IFNULL(phase1.cumulate_user, 0) AS 'cumulateFollowNum'
    FROM
    (
    SELECT uc.ref_date,us.pub_account_id,us.new_sum,us.cancel_sum,us.real_increase, uc.cumulate_user
    FROM
    ( SELECT
    ref_date,
    pub_account_id,
    IFNULL(SUM(new_user),0) AS 'new_sum',
    IFNULL(SUM(cancel_user),0) AS 'cancel_sum',
    IFNULL(SUM(new_user) - SUM(cancel_user),0) AS 'real_increase'
    FROM
    t_get_user_summary
    <where>
      <if test="beginDateStr !=null and beginDateStr != ''">
        AND ref_date >= #{beginDateStr}
      </if>
      <if test="endDateStr !=null and endDateStr != ''">
        AND ref_date <![CDATA[<=]]> #{endDateStr}
      </if>
      <if test="pubAccountIdListByUserIdList!=null and pubAccountIdListByUserIdList.size() > 0">
        AND pub_account_id in
        <foreach collection="pubAccountIdListByUserIdList" item="pubAccountId"
                 index="index" open="(" close=")" separator=",">
          #{pubAccountId}
        </foreach>
      </if>
    </where>
    GROUP BY ref_date,pub_account_id
    ORDER BY ref_date,pub_account_id
    ) us
    RIGHT JOIN (
    SELECT
    ref_date,
    pub_account_id,
    cumulate_user
    FROM
    t_get_user_cumulate
    <where>
      <if test="beginDateStr !=null and beginDateStr != ''">
        AND ref_date >= #{beginDateStr}
      </if>
      <if test="endDateStr !=null and endDateStr != ''">
        AND ref_date <![CDATA[<=]]> #{endDateStr}
      </if>
      <if test="pubAccountIdListByUserIdList!=null and pubAccountIdListByUserIdList.size() > 0">
        AND pub_account_id in
        <foreach collection="pubAccountIdListByUserIdList" item="pubAccountId"
                 index="index" open="(" close=")" separator=",">
          #{pubAccountId}
        </foreach>
      </if>
    </where>
    ) uc ON us.pub_account_id = uc.pub_account_id AND us.ref_date = uc.ref_date
    ) phase1 LEFT JOIN t_pub_account tpa ON phase1.pub_account_id = tpa.id

    ORDER BY pub_account_id, ref_date DESC;
  </select>

  <!-- 根据公众号id列表查询微信用户点赞信息 -->
  <select id="findPubAccountLikeNumByPubAccountIdListAndSearchDate" resultType="com.hubpd.bigscreen.vo.WXUserAnalyseVO" parameterType="java.util.Map" >
    SELECT
      tas.ref_date AS 'dateTime',
      tpa.wx_id AS 'wxNo',
      tpa.wx_name AS 'wxName',
    IFNULL(SUM(tas.total_like_num),0) AS 'likeNum'
    FROM t_article_stat_day tas LEFT JOIN t_pub_account tpa ON tas.pub_account_id = tpa.id
    <where>
      <if test="beginDateStr !=null and beginDateStr != ''">
        AND tas.ref_date >= #{beginDateStr}
      </if>
      <if test="endDateStr !=null and endDateStr != ''">
        AND tas.ref_date <![CDATA[<=]]> #{endDateStr}
      </if>
      <if test="pubAccountIdListByUserIdList!=null and pubAccountIdListByUserIdList.size() > 0">
        AND tas.pub_account_id in
        <foreach collection="pubAccountIdListByUserIdList" item="pubAccountId"
                 index="index" open="(" close=")" separator=",">
          #{pubAccountId}
        </foreach>
      </if>
    </where>
    GROUP BY  tas.pub_account_id, tas.ref_date ORDER BY tas.pub_account_id, tas.ref_date DESC;
  </select>





  <insert id="insert" parameterType="com.hubpd.bigscreen.bean.weishu_pdmi.PubAccountUserRelation" >
    insert into t_pub_account_user_relation (pub_account_id, user_id, user_follow,
      create_time, expired_time, org_id
      )
    values (#{pubAccountId,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, #{userFollow,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP}, #{expiredTime,jdbcType=TIMESTAMP}, #{orgId,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hubpd.bigscreen.bean.weishu_pdmi.PubAccountUserRelation" >
    insert into t_pub_account_user_relation
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="pubAccountId != null" >
        pub_account_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userFollow != null" >
        user_follow,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="expiredTime != null" >
        expired_time,
      </if>
      <if test="orgId != null" >
        org_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="pubAccountId != null" >
        #{pubAccountId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userFollow != null" >
        #{userFollow,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expiredTime != null" >
        #{expiredTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orgId != null" >
        #{orgId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
</mapper>